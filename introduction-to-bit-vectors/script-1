In this lecture we're going to
cover a useful and compact
data structure called a bit
vector.  The operations on a
bit vector are somewhat
similar to those on a hash
table, so it might be useful
to go through introduction to
hash tables lecture first.

Let say we want to represent a
set of integer between say
between 0 and N inclusive.
Since we are treating the
numbers as a set we can assume
that there are no duplicates.
A natural query might whether a
particular number i is in the
set?

Lets think about an efficient
way of storing these numbers
and how to efficiently answer
the query 'is i an integer in
the set'?

If you've gone the hash table
lecture then this may seem
familiar. Using a hash table
we'll need a hashing strategy
and a key representation. How
would we do this?

Well, remember that our
integers are in the range
0..N.  Observe that each integer in
that range could be a valid
index into an array. We don't
really need a hash functions
because the integers
themselves describe where they
go in a hash table.

What exactly do we store at
index an index associated with
the integer i? An
obvious thing to store is a
true boolean value.  Now, if
the integer i
is a member of the set, then
the index i assigned true.

There is an inefficiency
though.  In C booleans are
represented as integers. This
means that we'll probably need
at least 8 bits to represent
one boolean value. We can do
better!

We don't really need that
entire byte to represent true
or false. We can do it with
only 1 bit. A 1 bit for true
and a 0 bit for false. With
this scheme we set the i bit
to 1 to denote i as a member
of the set and we set the i
bit to 0 to exclude it. Now we
can represent the state of 8
integers with just one byte!
Much better.

How exactly do we map an
integer,i, to a bit in our
array? It's not too bad, just
a bit of arithmetic. 

First we have to decide the
type of our array; a good
choice is the native word size
of the machine we are on.
We'll assume a 32 bit word
size and an integer array of
32 bit integers.

We'll say that each array
index is a bucket, Given a
integer i we need to decide
which 'bucket' it will go
into. For example array[0] is
one bucket and array[1] is
another. Each bucket is a 32
bit integer, therefore each
bit can represent the state of
32 integers per bucket. Bucket
zero maintains the state of
integers 0..31 and bucket two
maintains 32..63

Figuring the appropriate
bucket is just a matter of
dividing by our word size 32
and because 32 is a power of
two we can divide efficiently
using the right shift
operator. 

Now that we know the bucket,
we need to know which bit in
the bucket to set.  We need to
set the bit according to the
remainder of i divided by 32.
For example if we want to set
the integer 33, the bucket is
33/32 and the bit is 33 mod
32.

An efficient way of finding 33
mod 32 is simply taking the 5
least significant bits of 33
with a bit mask. 

Take a look
at a list of integers in
binary form. The least
significant five bits of i%32
and i&0x1f are the same.

Thus setting a bit based on
integer i can be done with the
following code.

On the left we divide i by 32.
On the right we left shift a
bit into the appropriate
position. Then we assign the
result using a bitwise OR 
into the bucket i/32.

Testing a bit associated
with integer is done similarly
except we use a bitwise &.

Although this code wouldn't
win any beauty contest, it's
easy way of setting
bits!

In the next tutorial we'll go
over actually implementing the
bit vector. Until next time.
