


== PART 1 ==


A hash table is an efficient way to map an identifying value with 
some associated data. We'll call the identifying value a 'key' and the
associated data a 'record'.

For example we could map names to addresses. 

The key would be the name and the record would be the address. 

Or we could map words to a counter of how many times that word appears
in a text.

The key would be the word and the record would be the counter for that word.

The advantage of the hash table is that it allows us to quickly look 
up a record based on a key without having to search through the entire
datastructure.

This is true no matter how many records there are in the data structure.

In this part of the lecture we'll be discussing an implementation
of a hash tabled called an open addressing hash table.

Lets take a look at how an open addressing hash table works.

    [Action: Begin drawing an array]

At the heart of a hash table is an array. 

Let's say our keys are words the we represent using C character strings.

We want to map a word to a location in our hash table.

    [Action: Write the word "apple"]

To determine where in the array to map the key "apple" we'll use a
special function called a hash function. 

The concept is simple.

A key is the input to a hash function and it outputs where in the array
we should store the record for that key. 

The location also known as a bucket.

    [Action: Show an example hash of the word "apple"]

Say we have a hash function called 'h'. 'h' of "apple" might evaluate
to the bucket 3 and we'll store the data for our key there.

    [Action: Show an example hash of the word "orange"]

And 'h' of "orange" might evaluate to bucket 1.

This operation of adding new data to our hash table is named 'insertion'.

You may be wondering what happens if two different keys have the same
hash value, that is, they map to the same bucket? 

There are several techniques for resolving these collisions. 

    [Action: Draw a collision of "apple" and "orange"]

Lets say that "apple" is already inserted into bucket 3. 

Next we try to insert "orange" and it's hash value also maps to bucket 3. 

Ooops! Of course that bucket is already taken.

    [Action: Show a linear prob into bucket 4]

But bucket 4 isn't taken, let's just use that one. 

Thus our strategy is: If, during insertion, the target bucket 
is taken then try to insert into the bucket: bucket +1.

This is where the name "open addressing" comes from. 

If the address of where we want to store our data is already taken, 
we'll just use a different address.

Let's do an example.

    [Action: Show insertion of 'kiwi' into bucket 3]

If 'kiwi' were to evaluate into bucket 3, then we'll try bucket 4, then
bucket five.

Since bucket 5 is empty we'll insert 'kiki' there.

Keep in mind that it's possible that there isn't a free bucket to 
insert a new record into.

A closed addressing hash table of size 'm' will only hold 'm' records.

This technique of trying buckets next to each other is called linear probing 
and although it is simple it suffers from a problem called 
'primary clustering'. 

    [Action: Highlight long runs in the hash table]

Notice how long runs of records build up. 

In this case when searching for an item in the hash table it is no longer sufficient 
to check only the bucket at h(s).

This might be okay.

Having to check one or two buckets on average is okay, but as the hash
table fills up, or we are unlucky and get lots of collisions from our
input strings, then the advantage of our hash table is lost and we might as
well be using a regular array.

We can avoid these long runs of records with a different hashing strategy
called double hashing.

The hash function for the double hashing strategy takes the form:

    [Action: Write the double hashing function]

    h(s,i) = (h1(s) + i * h2(s)) mod m

Where m is the size of the array and i is the is the hash attempt 
starting at i = 0.

    [Action: Draw out example h(s,0), h(s, 1) ]

To insert into our hash table we'll check the bucket at h(s,0),
then bucket at h(s,1) and so on until we find an empty bucket or we've tried 
all the buckets. 

The double hashing strategy works much better than the linear probing
strategy but we have to make sure that m, the size of the array, and
the value of h2(s,i) meet certain constraints.

m, the size of the array, and h2(s,i) must be co-prime. 

In other words the greatest common factor of m and h2(s, i) must be 1.

One way to do this is to make sure that m is a power of two and that h2(s,i)
is always odd.

Another important operation is the 'member' operator. 

This operation allows us to test whether some string has already 
been inserted into our hash table. 

    [Action: Testing membership of "apple"]

The concept is similar to insertion. Let's say we want to determine if 
the key 'apple' has been inserted. 

First we'll test if the key is found at h(s,0). 

The member operation will return true if the bucket contains the key
"apple".

If we don't find "apple" at h(s, 0) then we test h(s, 1), h(s, 2) and so on
until we either we find our key, or we find an empty bucket, 
or we've tried all the buckets. 

In the later two cases the key is not in the hash table and we return false.

In the next part of the lesson we'll go over a sample implementation of the
hash table data structure in the C programming language. See you next time!
