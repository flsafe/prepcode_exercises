

== PART 3 ==


In this part of the lecture we'll be going over a simple example of
how to use a hash table in a program.

We'll implment a simple algorithm to efficiently detect dupicate strings
in an array.

The problem is stated as:

Given an array of strings detect and print the first
duplicate string.

We'll solve this problem using a hash table. We'll insert
each string that isn't a member of the hashtable.

If we encouter a string that is already a member in the hash table,
then that string is a duplicate.

Let's code it.

We'll begin be declaring a hashrec array that we'll use a 
our hash table.

I've made it size HASH_TAB which defined as size 512.

Be sure to adjust this size based on your application.

We'll also declare a local variable i that we'll use to 
iterate through the string array.

The first step in the our algorithm is to initialize the hash
table with all empty buckets. 

Remember that an empty bucket is identified by a NULL key pointer.

Next we'll iterate through each string in the string array.

If the current string isn't in the hash table then we'll insert it.

However if a string is already in our hash table, then that string 
is a duplicate and we print the duplicate string and exit the for loop.

Let's see this algorithm in action.

In our string list, grape is a duplicate string. If we execute
this program it should print out the string "grape".

Now I'll remove the duplicate string and we should see nothing printed
out.

In the next lecture we'll be going over a bit of theory on hash tables.

Until next time!
