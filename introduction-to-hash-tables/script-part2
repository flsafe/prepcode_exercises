

== PART 2 ==


In this part of the lecture we're going to fire up the text editor and rack up
some keyboard time. 

We'll be implementing a simple open addressing
hash table.

[Action: Implementing a hash table record]

We'll begin by including some header files for the function's we'll be 
using. 

Stdio.h includes the IO functions in the standard library

String.h includes some useful string related functions.

And stdlib.h includes functions for allocating memory.

Next we'll define how big the array for our hash table is going to be.

A good size depends on your input keys and your desired performance but
one bucket per key might be a good starting place.

Notice that we chose to make the array a power of two.

Next we'll declare the structure that will represent each
record in our hash table. 

This structure, named hashrec which is short for 'hash record', is composed of
a character string, which we'll use as the key. 

However it might be useful to associate additional data 
with the key depending on your application.

We could include something as simple as simple as a boolean value,
a counter, or as complex as another data structure altogether.

We'll try and keep it simple for now but keep this in mind for the practice
exercises.

Next we'll implment our hash functions. 

Recall that our hashing strategy is going to be double hashing. 

Our hash function will has two parameters. 

k is a pointer to the character string we'll be using as the key and 
i is the current hash attempt. 

We'll return the value h1(k) plus i * h2(k).

We want to make sure that the resulting hash value doesn't go past the end
of our array so the operation is done modulo HASH_TAB.

    [Action: Implmenent h1]

Next we'll implement the h1 hash function. 

It takes a character string and it returns a hash value for
that character string. 

One simple and effective string hash function is to iterate through
each character and add the character's value to the hash 
value computed so far. 

Here c is a pointer to an unsigned character. In C only printable characters
are guaranteed to have positive integer values so its best to take the unsigned
value of our input characters.

if dereferencing c ever yields the null character, then the test condition
of our for loops evaluates to false and the for loop exits.

The value 37 prime number that works well for hashing strings.

    [Action: Implement h2]

h2 is a different hash function and it's similar to h1

It has one parameter, a pointer to a character string. 

Just like h1, we iterate through the characters and compute the hash. I've
been a different prime number.

Remember that the size of the hash table and the value that
h2 returns must be co-prime. 

Before we return the computed hash, if the hash value is a multiple of two,
that is to say it is even, then we add one to it to turn it into an odd number.

    [Action: Implement locate]

Now we'll two operations on hour hash table: insert and member.

Insert will insert a new record in the hash table and member will test if
a certain key resides in the hash table.

To make the implmentation of both the insertion and member functions easier, 
we're first going to implement a helper function named locate.

the locate function will help us by returning the index of the bucket associated
with the given key, if it exists in our hash table.

This helper function has two parameters.

The first is a hash table and the second is a character string. 

We declare two local variables i and b.

i is used to keep track of how many buckets we've probed and
b is used to store the bucket address of the bucket being probed.

The function scans the entire hash table stopping if it finds
an empty bucket, or it finds a key that matches the k parameter, 
or when all the buckets have been tried.

We can tell an empty bucket if the bucket's key value is NULL.

To determine if we've found the key in the hash table 
we'll use the strcmp (short for string compare).

If the two strings given as arguments to strcmp are equal then, 
the function returns 0;

After a bucket is probed we increment i therefore when i is == HASH_TAB
we know we've checked all the buckets and the loop exists.

The address of the first bucket where any these three conditions occurs 
is returned. 

Now we're ready to implement the member function using the locate
helper function.

If the locate function returns the bucket address of an empty bucket 
then, the target key isn't in the hash table and we return 0;

Otherwise If the locate function returns the address of a non-empty 
bucket then, we check if the bucket key and our target key match. 

If they do then we return 1, otherwise we return 0.

Next we'll implement the insertion function.

To insert a new record into a hash table we'll need the address
of the first empty bucket.

Luckily our hash function returns just that.

If the locate function return a bucket that is empty, then we'll
make a copy of the target key and insert a new record by copying 
the target key into the bucket key.

Remember that the memory allocated for this key should be deallocated with
the 'free' function but for now I've left his part out. 

We'll return 1 to indicate the insertion was successful

If however the locate function doesn't return an empty bucket we test
to see if our target key was already inserted into the bucket.

If so, then we return 1 as if the key was just now inserted.

Otherwise if the locate function return a bucket that doesn't match our
target key then the hash table is full and we return 0 to signify that
the insertion failed.

Next we'll implement the cpy function we used in the insertion function.

The cpy function takes just one parameter, a pointer to a string. It
allocates enough memory to copy the string into. 

The amount of memory that needs to be allocated is equal to the number
of characters in the string times the size in bytes of a character, plus
one extra space for the null character at the end of each string.

We have to make sure that the function malloc successful, if it was
then we copy the string into the newly allocated memory.

Otherwise we return null.

Our final function is the init_hash_table function.

This function takes a hash table as input and sets all the bucket keys to 
NULL.

This way we can identify empty buckets within the hash table. 

We've now gone over implementations for the insert and member 
operations but what about a delete operation? 

How do we remove a key and its associated record?

Open addressing hash tables are not well suited for the deletion operation so
if you need to support that operation you should choose a different hash
table implementation, particularly a chaining hash table.

Be sure to checkout that lesson! 

In the next lecture we'll be going over a simple algorithm to detect
duplicate strings in an array. Until next time! 
